import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useJournal } from '@/context/JournalContext';
import { useAuth } from '@/context/AuthContext';
import Header from '@/components/Header';
import GradesReport from '@/components/GradesReport';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Calendar, CalendarDays, ClipboardList, GraduationCap } from 'lucide-react';
import { format } from 'date-fns';
import { gradeColors } from '@/data/mockData';

const StudentDashboard = () => {
  const { journal } = useJournal();
  const { currentUser } = useAuth();
  
  const student = journal.students.find(s => s.id === currentUser?.id);
  if (!student) return <div>–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è
  const today = new Date();
  const weekday = today.getDay();
  const upcomingClasses = student.sections.map(sectionId => {
    const section = journal.sections[sectionId];
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–ø—Ä–æ—Å—Ç–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    const dayMatch = section.schedule.match(/(–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞|–°—É–±–±–æ—Ç–∞|–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)/);
    const day = dayMatch ? dayMatch[0] : '';
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ–≤–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    let dayNumber = -1;
    switch (day) {
      case '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': dayNumber = 1; break;
      case '–í—Ç–æ—Ä–Ω–∏–∫': dayNumber = 2; break;
      case '–°—Ä–µ–¥–∞': dayNumber = 3; break;
      case '–ß–µ—Ç–≤–µ—Ä–≥': dayNumber = 4; break;
      case '–ü—è—Ç–Ω–∏—Ü–∞': dayNumber = 5; break;
      case '–°—É–±–±–æ—Ç–∞': dayNumber = 6; break;
      case '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': dayNumber = 0; break;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–Ω—è—Ç–∏—è
    let daysUntil = dayNumber - weekday;
    if (daysUntil <= 0) daysUntil += 7; // –ï—Å–ª–∏ –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
    
    const nextDate = new Date(today);
    nextDate.setDate(today.getDate() + daysUntil);
    
    return {
      section,
      nextDate,
      daysUntil
    };
  }).sort((a, b) => a.daysUntil - b.daysUntil);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
  const recentGrades = [];
  for (const sectionId of student.sections) {
    const section = journal.sections[sectionId];
    const sectionGrades = student.grades?.[sectionId] || {};
    
    for (const [date, grade] of Object.entries(sectionGrades)) {
      recentGrades.push({
        section,
        date,
        grade
      });
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –¥–∞—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)
  recentGrades.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <main className="container mx-auto py-6">
        <h2 className="text-3xl font-bold mb-6">–ü—Ä–∏–≤–µ—Ç, {student.name}! üëã</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <CalendarDays className="mr-2 h-5 w-5" />
                –ë–ª–∏–∂–∞–π—à–µ–µ –∑–∞–Ω—è—Ç–∏–µ
              </CardTitle>
            </CardHeader>
            <CardContent>
              {upcomingClasses.length > 0 ? (
                <div>
                  <h3 className="font-medium">{upcomingClasses[0].section.name}</h3>
                  <p className="text-sm text-gray-600">
                    {format(upcomingClasses[0].nextDate, 'dd.MM.yyyy')} ‚Ä¢ {upcomingClasses[0].section.schedule.split(', ')[1]}
                  </p>
                  <p className="text-sm mt-2">
                    –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {upcomingClasses[0].section.teacher}
                  </p>
                </div>
              ) : (
                <p>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π</p>
              )}
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <GraduationCap className="mr-2 h-5 w-5" />
                –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
              </CardTitle>
            </CardHeader>
            <CardContent>
              {recentGrades.length > 0 ? (
                <div className="space-y-2">
                  {recentGrades.slice(0, 3).map((item, idx) => (
                    <div key={idx} className="flex justify-between items-center">
                      <div>
                        <div className="font-medium">{item.section.name}</div>
                        <div className="text-sm text-gray-600">{format(new Date(item.date), 'dd.MM.yyyy')}</div>
                      </div>
                      <div className={`px-3 py-1 rounded-full ${gradeColors[item.grade]}`}>
                        {item.grade === 0 ? '–ù/–ê' : item.grade}
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p>–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫</p>
              )}
            </CardContent>
          </Card>
          
          <Card>
            <CardHeader className="pb-2">
              <CardTitle className="text-lg flex items-center">
                <ClipboardList className="mr-2 h-5 w-5" />
                –ú–æ–∏ —Å–µ–∫—Ü–∏–∏
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ul className="space-y-1">
                {student.sections.map(sectionId => (
                  <li key={sectionId} className="flex items-center">
                    <span className="w-2 h-2 rounded-full bg-blue-500 mr-2"></span>
                    {journal.sections[sectionId].name}
                  </li>
                ))}
              </ul>
            </CardContent>
          </Card>
        </div>
        
        <Tabs defaultValue="progress">
          <TabsList>
            <TabsTrigger value="progress">–£—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</TabsTrigger>
            <TabsTrigger value="schedule">–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</TabsTrigger>
          </TabsList>
          
          <TabsContent value="progress">
            <div className="mt-4">
              <GradesReport studentId={student.id} />
            </div>
          </TabsContent>
          
          <TabsContent value="schedule">
            <Card className="mt-4">
              <CardHeader>
                <CardTitle>–ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {student.sections.map(sectionId => {
                    const section = journal.sections[sectionId];
                    return (
                      <div key={sectionId} className="flex p-3 border rounded-lg">
                        <div className="mr-4 p-2 bg-blue-100 rounded-md text-blue-700">
                          <Calendar className="h-6 w-6" />
                        </div>
                        <div>
                          <h3 className="font-medium">{section.name}</h3>
                          <p className="text-sm text-gray-600">{section.schedule}</p>
                          <p className="text-sm">–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {section.teacher}</p>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
};

export default StudentDashboard;
